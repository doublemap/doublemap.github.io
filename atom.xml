<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[DoubleMap Engineering]]></title>
  <link href="http://doublemap.github.io/atom.xml" rel="self"/>
  <link href="http://doublemap.github.io/"/>
  <updated>2015-05-29T12:26:04-04:00</updated>
  <id>http://doublemap.github.io/</id>
  <author>
    <name><![CDATA[The DoubleMap team]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Optimizing Python With Cython]]></title>
    <link href="http://doublemap.github.io/blog/2015/05/29/optimizing-python/"/>
    <updated>2015-05-29T11:09:00-04:00</updated>
    <id>http://doublemap.github.io/blog/2015/05/29/optimizing-python</id>
    <content type="html"><![CDATA[<p>Python is slow. It&rsquo;s still faster than a lot of other languages, but
describing Python code as &ldquo;fast&rdquo; will probably get some weird looks from
people who use compiled or JITted languages.</p>

<p>Still, I love Python for its design and speed at which I can write good code.
Most of the time, when writing Python for distributed or web applications, it
doesn&rsquo;t matter. Your runtime is usually dominated by network traffic or data
accesses than it is by raw computational speed. In those cases, the correct
optimization is often reducing network requests or indexing your data.</p>

<p>Sometimes&mdash;just occasionally&mdash;we actually do need fast computation.
Traditional Python wisdom has been to profile your code (perhaps using
cProfile), identify the hot spot, and rewrite it in C as a Python extension.
I&rsquo;ve had to do that before for a handwriting recognition algorithm with great
success (it turned a 2&ndash;3 second computation into a practically
real-time one), but writing C code and then figuring out the FFI was a pain.
I had to rewrite the algorithm in C, verify that my C version was correct and
didn&rsquo;t have memory errors, and then figure out the right incantations to get
it to cooperate with Python.</p>

<p>Let&rsquo;s try something different this time.</p>

<h2>Problem</h2>

<p>At DoubleMap, geographic distance calculation is something that gets used a
lot, and we use the haversine function to calculate distance between two
points on Earth. In some of our data analysis, we might run the haversine
function millions of times in a tight loop, and it was causing some reports to
take way too long.</p>

<p>Profiling the code showed that the two heaviest operations were fetching data
from the data store and the haversine function.</p>

<p><strong>Play along at home:</strong> Clone the repo at
<a href="https://github.com/doublemap/haversine-optimization">https://github.com/doublemap/haversine-optimization</a> and start from the first
commit to see how the code changes step by step.</p>

<p>The commands you should know are <code>pip install cython</code> and <code>python setup.py
build_ext --inplace</code>.</p>

<h2>Original code</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sin</span><span class="p">,</span> <span class="n">cos</span><span class="p">,</span> <span class="n">acos</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">haversine</span><span class="p">(</span><span class="n">coord1</span><span class="p">,</span> <span class="n">coord2</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Given two (lat, lng) tuples, returns the distance between them in</span>
</span><span class='line'><span class="sd">    meters.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">lat1</span><span class="p">,</span> <span class="n">lng1</span> <span class="o">=</span> <span class="n">coord1</span>
</span><span class='line'>    <span class="n">lat2</span><span class="p">,</span> <span class="n">lng2</span> <span class="o">=</span> <span class="n">coord2</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">lat1</span> <span class="o">&gt;</span> <span class="mi">90</span> <span class="ow">or</span> <span class="n">lat1</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">90</span> <span class="ow">or</span> <span class="n">lat2</span> <span class="o">&gt;</span> <span class="mi">90</span> <span class="ow">or</span> <span class="n">lat2</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">90</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Invalid latitude (should be between +/- 90)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lng1</span> <span class="o">&gt;</span> <span class="mi">180</span> <span class="ow">or</span> <span class="n">lng1</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">180</span> <span class="ow">or</span> <span class="n">lng2</span> <span class="o">&gt;</span> <span class="mi">180</span> <span class="ow">or</span> <span class="n">lng2</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">180</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Invalid longitude (should be between +/- 180)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">phi1</span> <span class="o">=</span> <span class="p">(</span><span class="mf">90.0</span> <span class="o">-</span> <span class="n">lat1</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.0174532925</span>
</span><span class='line'>    <span class="n">phi2</span> <span class="o">=</span> <span class="p">(</span><span class="mf">90.0</span> <span class="o">-</span> <span class="n">lat2</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.0174532925</span>
</span><span class='line'>    <span class="n">theta1</span> <span class="o">=</span> <span class="n">lng1</span> <span class="o">*</span> <span class="mf">0.0174532925</span>
</span><span class='line'>    <span class="n">theta2</span> <span class="o">=</span> <span class="n">lng2</span> <span class="o">*</span> <span class="mf">0.0174532925</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">phi1</span><span class="p">)</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">phi2</span><span class="p">)</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">theta1</span> <span class="o">-</span> <span class="n">theta2</span><span class="p">)</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">phi1</span><span class="p">)</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">phi2</span><span class="p">))</span>
</span><span class='line'>    <span class="n">arc</span> <span class="o">=</span> <span class="n">acos</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">arc</span> <span class="o">*</span> <span class="mf">6367444.7</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, here&rsquo;s the benchmark code that is used throughout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">print_function</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">timeit</span> <span class="kn">import</span> <span class="n">timeit</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">timeit</span><span class="p">(</span><span class="s">&quot;haversine((39.132213, -86.12439), (38.55213, -86.94910))&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="n">setup</span><span class="o">=</span><span class="s">&quot;from haversine import haversine&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="n">number</span><span class="o">=</span><span class="mi">300000</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty straightforward. Let&rsquo;s try pre-compiling this code into a C extension
to see if that helps.</p>

<p>Following the
<a href="http://docs.cython.org/src/tutorial/cython_tutorial.html">Cython Basic Tutorial</a>,
I renamed <code>haversine.py</code> to <code>haversine.pyx</code> and created a <code>setup.py</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">distutils.core</span> <span class="kn">import</span> <span class="n">setup</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">Cython.Build</span> <span class="kn">import</span> <span class="n">cythonize</span>
</span><span class='line'>
</span><span class='line'><span class="n">setup</span><span class="p">(</span>
</span><span class='line'>    <span class="n">ext_modules</span> <span class="o">=</span> <span class="n">cythonize</span><span class="p">(</span><span class="s">&quot;haversine.pyx&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running <code>python setup.py build_ext --inplace</code> built <code>haversine.so</code> out of my
unmodified Python code. Easy-peasy.</p>

<p>Benchmark results (300,000 iterations):</p>

<p><strong>Original code:</strong> 2.85 seconds<br/>
<strong>Compiled:</strong> 2.01 seconds</p>

<p>So, 29% time savings without any modification to the original code.</p>

<h2>C math functions</h2>

<p>Currently, we&rsquo;re still using Python&rsquo;s math functions. Let&rsquo;s see if we can cut
out some overhead by importing <code>math.h</code> instead.</p>

<p>Except, since this is Cython, all we need to do is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- a/haversine.pyx</span>
</span><span class='line'><span class="gi">+++ b/haversine.pyx</span>
</span><span class='line'><span class="gu">@@ -1,4 +1,4 @@</span>
</span><span class='line'><span class="gd">-from math import sin, cos, acos</span>
</span><span class='line'><span class="gi">+from libc.math cimport sin, cos, acos</span>
</span></code></pre></td></tr></table></div></figure>


<p>Benchmark results (300,000 iterations):</p>

<p><strong>Original code:</strong> 2.85 seconds<br/>
<strong>Compiled:</strong> 2.01 seconds<br/>
<strong>libc.math:</strong> 1.33 seconds</p>

<p>So far we&rsquo;ve saved 53% of the time from the original code.</p>

<h2>C types</h2>

<p>Cython&rsquo;s biggest extension of the Python language is its type annotations.
Speed ups can be had by telling Cython the types of each variable in advance.
We are dealing with geographic coordinates, so we&rsquo;ll be using doubles for
pretty much everything:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">haversine</span><span class="p">(</span><span class="nb">tuple</span> <span class="n">coord1</span><span class="p">,</span> <span class="nb">tuple</span> <span class="n">coord2</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Given two (lat, lng) tuples, returns the distance between them in</span>
</span><span class='line'><span class="sd">    meters.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">cdef</span> <span class="n">double</span> <span class="n">lat1</span>
</span><span class='line'>    <span class="n">cdef</span> <span class="n">double</span> <span class="n">lng1</span>
</span><span class='line'>    <span class="n">cdef</span> <span class="n">double</span> <span class="n">lat2</span>
</span><span class='line'>    <span class="n">cdef</span> <span class="n">double</span> <span class="n">lng2</span>
</span><span class='line'>    <span class="n">lat1</span><span class="p">,</span> <span class="n">lng1</span> <span class="o">=</span> <span class="n">coord1</span>
</span><span class='line'>    <span class="n">lat2</span><span class="p">,</span> <span class="n">lng2</span> <span class="o">=</span> <span class="n">coord2</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">lat1</span> <span class="o">&gt;</span> <span class="mi">90</span> <span class="ow">or</span> <span class="n">lat1</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">90</span> <span class="ow">or</span> <span class="n">lat2</span> <span class="o">&gt;</span> <span class="mi">90</span> <span class="ow">or</span> <span class="n">lat2</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">90</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Invalid latitude (should be between +/- 90)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">lng1</span> <span class="o">&gt;</span> <span class="mi">180</span> <span class="ow">or</span> <span class="n">lng1</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">180</span> <span class="ow">or</span> <span class="n">lng2</span> <span class="o">&gt;</span> <span class="mi">180</span> <span class="ow">or</span> <span class="n">lng2</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">180</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Invalid longitude (should be between +/- 180)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cdef</span> <span class="n">double</span> <span class="n">ph1</span>
</span><span class='line'>    <span class="n">cdef</span> <span class="n">double</span> <span class="n">ph2</span>
</span><span class='line'>    <span class="n">cdef</span> <span class="n">double</span> <span class="n">theta1</span>
</span><span class='line'>    <span class="n">cdef</span> <span class="n">double</span> <span class="n">theta2</span>
</span><span class='line'>    <span class="n">cdef</span> <span class="n">double</span> <span class="n">c</span>
</span><span class='line'>    <span class="n">cdef</span> <span class="n">double</span> <span class="n">arc</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">phi1</span> <span class="o">=</span> <span class="p">(</span><span class="mf">90.0</span> <span class="o">-</span> <span class="n">lat1</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.0174532925</span>
</span><span class='line'>    <span class="n">phi2</span> <span class="o">=</span> <span class="p">(</span><span class="mf">90.0</span> <span class="o">-</span> <span class="n">lat2</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.0174532925</span>
</span><span class='line'>    <span class="n">theta1</span> <span class="o">=</span> <span class="n">lng1</span> <span class="o">*</span> <span class="mf">0.0174532925</span>
</span><span class='line'>    <span class="n">theta2</span> <span class="o">=</span> <span class="n">lng2</span> <span class="o">*</span> <span class="mf">0.0174532925</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">phi1</span><span class="p">)</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">phi2</span><span class="p">)</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">theta1</span> <span class="o">-</span> <span class="n">theta2</span><span class="p">)</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">phi1</span><span class="p">)</span> <span class="o">*</span> <span class="n">cos</span><span class="p">(</span><span class="n">phi2</span><span class="p">))</span>
</span><span class='line'>    <span class="n">arc</span> <span class="o">=</span> <span class="n">acos</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">arc</span> <span class="o">*</span> <span class="mf">6367444.7</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Original code:</strong> 2.85 seconds<br/>
<strong>Compiled:</strong> 2.01 seconds<br/>
<strong>libc.math:</strong> 1.33 seconds<br/>
<strong>C types:</strong> 0.466 seconds</p>

<p>In three easy steps, we&rsquo;ve reduced the run time of this function by 84%. More
importantly, we&rsquo;re still writing what&rsquo;s basically Python. We don&rsquo;t have to
remember to free our variables or check our array bounds. That additional
safety is not free (and there are various flags to disable Cython safety
checks) but with Cython optimizing a Python function doesn&rsquo;t have to be a
rewrite-everything task.</p>

<p>We probably could have gone further in optimizing this, but these speed-ups
got us into &ldquo;good enough&rdquo; territory, and that&rsquo;s good enough.</p>

<h2>Distribution</h2>

<p>Our optimized haversine function is available on PyPI under the name
&ldquo;cHaversine&rdquo;. One key difference is that the distributed tarball includes the
C code generated by Cython so that you, as the package user, don&rsquo;t need Cython
to download and build the C extension.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everyone Panic! Almost Free Downtime Phone Alerts]]></title>
    <link href="http://doublemap.github.io/blog/2014/05/29/everyone-panic/"/>
    <updated>2014-05-29T11:24:46-04:00</updated>
    <id>http://doublemap.github.io/blog/2014/05/29/everyone-panic</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/doublemap/everyonepanic">Uptime Robot (free) + App Engine (free) + Twilio (cheap) = almost free
downtime alerts!</a></p>

<ol>
<li>Uptime Robot notices that your website is not responding.</li>
<li>Everyone Panic! checks Uptime Robot and sees that something is down.</li>
<li>You get a call through Twilio telling you to panic.</li>
<li>You get another call 15 minutes later because you still haven&rsquo;t fixed the
problem.</li>
</ol>


<p>Sure, it&rsquo;s easy to get emailed when your website goes down, but real
honest-to-goodness phone calls have an immediacy that&rsquo;s hard to beat.</p>

<p>Since our GPS bus-tracking system is used at all hours of the day, early on we
introduced automated monitoring. But when everyone is asleep, emails and text
messages go unnoticed until the morning and it sucks to not know where your
bus is at 1am.</p>

<p>We quickly whipped an app together using Python to tie
Uptime Robot and Twilio together. If one of the items in Uptime Robot goes
down then the Python app will ask Twilio to call us. We made it, put it on App
Engine, and haven&rsquo;t touched it since. Even though our automated monitoring has
grown since then, this little app, with zero maintenance, still dutifully
watches Uptime Robot for any websites that are down.</p>

<p>Literally, there have been zero commits to the original repo since the first
day. Now the code&rsquo;s been cleaned up and
<a href="https://github.com/doublemap/everyonepanic">put on GitHub</a>. You can download
it, configure it, and throw it onto App Engine or Heroku in a few minutes.</p>

<p>It&rsquo;s not entirely free &ndash; you&rsquo;ll need to pay Twilio for voice calls, but the
price is $0.02 per call and it&rsquo;s hard to think of a situation where knowing
your website is down isn&rsquo;t worth two cents. And, of course, you should keep
your Twilio account balance in the black.</p>

<p>But for the hobbyist who doesn&rsquo;t mind trying out a new app, this is a really
simple way to have your phone ring when Hacker News tramples your latest pet
project.</p>

<p><a href="https://github.com/doublemap/everyonepanic">Everyone Panic! on GitHub</a></p>

<p><a href="https://news.ycombinator.com/item?id=7816241">Comments on Hacker News</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Porting 600k Map Views to OpenStreetMap/MapBox]]></title>
    <link href="http://doublemap.github.io/blog/2014/04/29/porting-600k-map-views-to-openstreetmap/"/>
    <updated>2014-04-29T10:25:45-04:00</updated>
    <id>http://doublemap.github.io/blog/2014/04/29/porting-600k-map-views-to-openstreetmap</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://doublemap.github.io/images/doublemap-plus-mapbox.png">
This past week, we here at DoubleMap made a big change that users probably
<em>won&rsquo;t</em> notice. Instead of Google Maps, all of our public maps are now powered
by MapBox with OpenStreetMap data.</p>

<p>We have hundreds of thousands of hits per month to our online maps from people
using our real-time bus tracking to find out where their bus is. This number
doesn&rsquo;t even include transit riders using their agency&rsquo;s custom app or public
TV displays.</p>

<p>For a company whose main feature is showing buses move on a map, it was a big
deal for everyone &ndash; we had to make sure that data at each of our client
transit agencies was good, update some of our sales material that specifically
mentioned Google Maps, decide on new providers, and figure out the overall
costs of switching and not
switching. We didn&rsquo;t want to disrupt our transit agencies and the riders that
use our service to catch the bus every day. The actual coding changes were
relatively straightforward.</p>

<p>Thanks to MapBox, were able to switch everything over almost seamlessly
without interrupting our users or creating a jarring change.</p>

<h2>Evaluation</h2>

<p>It shouldn&rsquo;t be a surprise that the main motivation was simply cost. Google
doesn&rsquo;t publish its enterprise maps pricing, but it&rsquo;s orders of magnitude more
expensive than MapBox.</p>

<p>We took a careful look at what we would have lost by switching away from
Google. The main feature that we can&rsquo;t get anywhere else is Street View,
something that nobody has come close to replicating. We also lost out on
angled aerial imagery. Both of these are cool, but ultimately not worth the
price difference.</p>

<p><video width=592 style="width:592px" loop autoplay>
  <source src="http://doublemap.github.io/images/iubdoublemap.mp4" type="video/mp4">
  <source src="http://doublemap.github.io/images/iubdoublemap.webm" type="video/webm">
</video></p>

<h2>What&rsquo;s in a map?</h2>

<p>Part of the thinking change that most people have to go through when switching
is that maps don&rsquo;t always come in one giant bundle.
&ldquo;Google Maps&rdquo; can refer to everything from the JavaScript library to
the pop-ups with user reviews to the navigation to Street View. With
OpenStreetMap, you get your choice of JavaScript mapping engine and different
tile sets.</p>

<p>For example, you might choose to use <a href="http://leafletjs.com/">Leaflet</a> with
<a href="http://www.opencyclemap.org/">OpenCycleMap</a> and <a href="https://www.mapbox.com/blog/mapbox-satellite/">MapBox
Satellite</a> as your layers, or
you might use <a href="http://openlayers.org/">OpenLayers</a> with your own
<a href="http://tilestache.org/">tileserver</a>
plus the <a href="http://www.thunderforest.com/landscape/">Thunderforest Landscape</a>
map.</p>

<p><em>Everything is swappable.</em> When we were testing, it was a one-line change to
switch between MapQuest Open, CloudMade, and MapBox tiles.</p>

<p>We ended up using Leaflet with a custom MapBox style plus MapBox Satellite,
and it looks pretty awesome.</p>

<h2>Map styling</h2>

<p>One of the complaints levied against OpenStreetMap is that their map style
looks ugly. That&rsquo;s not really fair, because OSM is there to provide the map
data, and most people who see OSM data see it through a custom map style, like
on FourSquare or Pinterest (or DoubleMap).</p>

<p>The power and curse of OSM is that you have total control over how the map
looks. The power is that if you want a bubble-gum-pink map with 36pt Comic Sans
labels and no roads, that&rsquo;s easily doable.
The curse is that it can get complicated, such as when you decide that
you need to label each US highway using its state-specific shield image.
As TileMill matures, there will hopefully be more and more styles to build on
rather than starting from scratch.</p>

<p>One of the reasons why we initially went with CloudMade was because they had
an easy online map styler that let you point and click a feature, and then
change that feature class&rsquo;s colors. This let us mostly duplicate our custom
style we were using with Google Maps. CloudMade, however, decided to
<a href="http://notes.ericjiang.com/posts/741">get out of non-enterprise services</a>
not too long after I had gotten the map to look the way I wanted it to.</p>

<p><em>Enter MapBox.</em> MapBox has a really slick desktop program, TileMill, that lets
you generate map tiles using a CSS-ish language called CartoCSS. The downside
of TileMill is that you have to download raw map data, render the tiles you
need (which easily gets into the gigabytes), and then upload them somewhere.
We have clients internationally and we would have had to download each
region&rsquo;s OSM data and render new tiles every time we got another customer.</p>

<p>This is all fixed in <a href="https://github.com/mapbox/tm2">TM2</a>, which downloads
vector map tiles from MapBox
on the fly so you can upload just the compiled map style to MapBox and
they&rsquo;ll handle all the data and rendering as needed.</p>

<p>Here&rsquo;s our result:</p>

<p><img src="http://doublemap.github.io/images/osm-google-comparison.png"></p>

<p>Our custom style is designed to be muted with a limited color palette to let
our agencies&#8217; custom route colors pop when overlaid. I hope to write about
TileMill 2 in the future, but right now it&rsquo;s in &ldquo;experimental&rdquo; status.</p>

<h2>Porting the source code</h2>

<p>Our original front-end code was written to use v2 of the Google Maps JS API.
Once that was deprecated, we eventually rewrote it to use v3 of the Google
Maps API. When we started investigating OSM as a replacement, we noticed how
polished the Leaflet library was. The Leaflet API is based on v2 of the
Google Maps API so we were essentially doing the reverse of what we had
done in the past. All of the concepts mapped almost 1-to-1, and there was
nothing that Leaflet lacked in terms of functionality.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">-    r.polyline = new google.maps.Polyline({</span>
</span><span class='line'><span class="gd">-        path: points,</span>
</span><span class='line'><span class="gd">-        map: r.visible ? map : null,</span>
</span><span class='line'><span class="gd">-        strokeColor: &quot;#&quot;+r.color,</span>
</span><span class='line'><span class="gd">-        strokeOpacity: 0.6,</span>
</span><span class='line'><span class="gd">-        strokeWeight: 4,</span>
</span><span class='line'><span class="gd">-        zIndex: 1</span>
</span><span class='line'><span class="gd">-    })</span>
</span><span class='line'><span class="gd">-    google.maps.event.addListener(r.polyline, &#39;mouseover&#39;,</span>
</span><span class='line'><span class="gd">-        function(routeId) {</span>
</span><span class='line'><span class="gi">+    r.polyline = new L.Polyline(points, {</span>
</span><span class='line'><span class="gi">+        color: &quot;#&quot;+r.color,</span>
</span><span class='line'><span class="gi">+        opacity: 0.6,</span>
</span><span class='line'><span class="gi">+        weight: 4</span>
</span><span class='line'><span class="gi">+    });</span>
</span><span class='line'><span class="gi">+    if(r.visible)</span>
</span><span class='line'><span class="gi">+        map.addLayer(r.polyline);</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+    r.polyline.on(&#39;mouseover&#39;, function(routeId) {</span>
</span><span class='line'>             return function () { highlightRoute(routeId, true); };
</span><span class='line'>         }(r.id));
</span></code></pre></td></tr></table></div></figure>


<p>This above snippet shows how a bit of our polyline code changed.</p>

<p>One happy side effect of this conversion was that the mobile web page (for
users who can&rsquo;t or don&rsquo;t use our iPhone and Android apps) runs better.
Animating markers on Google Maps with a Chrome-on-Android user agent would
cause unbearable flickering. Leaflet runs smoothly on mobile.</p>

<h2>OpenStreetMap for the future</h2>

<p>We&rsquo;re excited about joining the OpenStreetMap ecosystem. There&rsquo;s an incredible
amount of work that&rsquo;s been put into OSM by its contributors, and we hope to
contribute back what we can. One of our iPhone apps is already using MapBox on
top of Apple Maps, and OSM might be what bring sanity back to mobile maps.
We&rsquo;re also looking at how we can use OSM data for geocoding, routing, and any
other geo needs we might have &ndash; saving money while helping an open community
grow is a win-win for the years to come.</p>

<p>You can check out one of live bus-tracking maps at
<a href="http://iub.doublemap.com/map/">iub.doublemap.com</a>.</p>

<p><a href="https://news.ycombinator.com/item?id=7675799">Comments on Hacker News</a></p>
]]></content>
  </entry>
  
</feed>
